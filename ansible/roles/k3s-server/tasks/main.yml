---
- name: Verify that required string variables are defined
  assert:
    that: required_var is defined and required_var | length > 0 and required_var != None
    fail_msg: "{{ required_var }} needs to be set for the role to work "
    success_msg: "Required variable {{ required_var }} is defined"
  delegate_to: "{{ groups['proxmox_controller'][0] }}"
  loop_control:
    loop_var: required_var
  with_items:
    - k3s_server__ip_end
    - k3s_server__ip_start

- name: Install pip
  apt:
    name: python3-pip
    state: latest
    install_recommends: no

- name: Install NFS client
  apt:
    name: nfs-common
    state: latest
    install_recommends: no

- name: Install OpenShift module for Python
  pip:
    name: openshift
    state: latest

- name: Install arkade
  include_role:
    name: install.arkade

- name: Install k3sup
  ansible.builtin.shell: |
    arkade get k3sup
    mv ~/.arkade/bin/k3sup /usr/local/bin/k3sup
    chmod a+rx /usr/local/bin/k3sup
    rm -rf ~/.arkade
  args:
    creates: /usr/local/bin/k3sup
  become: true

- name: Create kube config directory
  ansible.builtin.file:
    path: ~/.kube
    state: directory

- name: Install k3s cluster
  ansible.builtin.shell: |
    k3sup install \
      --host "$(hostame)" \
      --ip "127.0.0.1" \
      --k3s-extra-args '--disable servicelb --disable traefik --with-node-id' \
      --local \
      --local-path ~/.kube/config
    echo "export KUBECONFIG=~/.kube/config" >> ~/.bashrc
  args:
    creates: ~/.kube/config
  become: true

- name: 'Setup kubectl for users: {{ k3s_server__kubectl_users }}'
  block:
    - name: Copy kube config
      ansible.builtin.copy:
        dest: /home/{{ item }}/.kube/
        group: '{{ item }}'
        owner: '{{ item }}'
        remote_src: yes
        src: ~/.kube/config
      with_items: '{{ k3s_server__kubectl_users }}'

    - name: Set KUBECONFIG environment variable
      ansible.builtin.lineinfile:
        dest: /home/{{ item }}/.bashrc
        group: '{{ item }}'
        line: "export KUBECONFIG=~/.kube/config"
        owner: '{{ item }}'
        state: present
      with_items: '{{ k3s_server__kubectl_users }}'

- name: Wait for nodes to be ready
  delay: 2
  register: nodes
  retries: 30
  shell: "kubectl get nodes"
  until:      
    - '" Ready "  in nodes.stdout'

- name: Install metallb
  include_role:
    name: install.metallb
  vars:
    metallb__ip_end: '{{ k3s_server__ip_end }}'
    metallb__ip_start: '{{ k3s_server__ip_start }}'

- name: Install nfs-client-provisioner
  ansible.builtin.shell: |
    arkade install nfs-client-provisioner \
      --nfs-server {{ k3s_server__nfs_server }} \
      --nfs-path {{ k3s_server__nfs_path}} && \
      --set storageClass.name=nfs
    mkdir -p /etc/ansible-locks && \
    touch /etc/ansible-locks/nfs-client-provisioner
  args:
    creates: "/etc/ansible-locks/nfs-client-provisioner"

- name: Install traefik2 ingress controller
  ansible.builtin.shell: |
    arkade install traefik2 \
      --dashboard
    mkdir -p /etc/ansible-locks && \
    touch /etc/ansible-locks/traefik2
  args:
    creates: "/etc/ansible-locks/traefik2"

- name: Install argocd
  include_role:
    name: install.argocd
