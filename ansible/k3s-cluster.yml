---
- import_playbook: playbooks/proxmox.update-user-data.yml

- name: Create k3s-server for environment {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Create k3s server node
    block:
    - include_vars:
        file: config/{{ environment_key }}.yaml
        name: config
    - name: Create new cloned VM
      include_role:
        name: vm.clone
      vars:
        proxmox__balloon: '{{ config.memory_min | default(2048) }}'
        proxmox__memory: '{{ config.memory_min | default(4096) }}'
        vm__clone_basename: k3s-server-{{ environment_key }}
        vm__clone_type: k3s-server
        vm__inventory_group: new_servers
        vm__template: '{{ config.vm_template | default("ubuntu-server-16gb-20210117") }}'
    when: mode == 'create'
  vars:
    # set to "create" to run this play (and create new cluster)
    mode: update

# TODO: teardown tasks are very crude for now
- name: Destroy cluster for environment {{ environment_key }}
  gather_facts: no
  hosts: k3s_nodes,&{{ environment_key }}
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Destroy node {{ inventory_hostname }}
    block:
    - name: Stop VM {{ inventory_hostname }}
      delegate_to: toolbox
      community.general.proxmox_kvm:
        api_user: '{{ proxmox__api_user }}'
        api_password: '{{ proxmox__api_password }}'
        api_host: '{{ proxmox__api_host }}'
        force: yes
        name: '{{ inventory_hostname }}'
        node: typhon
        proxmox_default_behavior: no_defaults
        state: stopped
        timeout: 300
    # VM removal fails silently if it is not shut down, so we wait for VM to settle after stopping first
    - name: Wait for VM to shutdown
      delegate_to: localhost
      wait_for:
        timeout: 15
    - name: Remove VM {{ inventory_hostname }}
      delegate_to: toolbox
      community.general.proxmox_kvm:
        api_user: '{{ proxmox__api_user }}'
        api_password: '{{ proxmox__api_password }}'
        api_host: '{{ proxmox__api_host }}'
        name: '{{ inventory_hostname }}'
        node: typhon
        proxmox_default_behavior: no_defaults
        state: absent
    when: mode == 'destroy'
  vars:
        # set to "destroy" to run this play (and destroy a cluster)
    mode: update

- name: Ensure nodes are running for environment {{ environment_key }}
  gather_facts: no
  hosts: k3s_nodes,&{{ environment_key }}
  tasks:
    - name: Start VM - {{ inventory_hostname }}
      include_role:
        name: vm.start

- name: Configure k3s on servers for environment {{ environment_key }}
  gather_facts: no
  hosts: k3s_servers,&{{ environment_key }}
  tasks:
  - name: Load environment configuration
    include_vars:
      file: config/{{ environment_key }}.yaml
      name: config
  - name: Apply k3s-server role
    include_role:
      name: k3s.server
    vars:
      k3s__nfs_enabled: true
      k3s__nfs_server: lockbox.pegasus
      k3s__nfs_path: /export/k3s-{{ environment_key }}
  vars:
    argocd__admin_password_hash: "$2a$10$LeKBprcARUlaiqBpdFJHUux4KJD1/pmgeeG7QMXwg0hBElVmS1./S"
    argocd__root_application_path: root
    argocd__root_application_revision: '{{ environment_key }}'
    argocd__root_application_url: https://github.com/skleinjung/pegasus-deployments.git
    argocd__helm_repositories:
      - name: bitnami
        type: helm
        url: https://charts.bitnami.com/bitnami
      - name: traefik
        type: helm
        url: https://helm.traefik.io/traefik
    sealed_secrets__master_key: '{{ config.sealed_secrets_master_key }}'
    
# next, bootstrap argocd independently instead of inside the k3s.server

- name: Save cluster server configs locally
  become: true
  gather_facts: no
  hosts: k3s_servers,&{{ environment_key }}
  tasks:
  - name: Download cluster config
    include_role:
      name: k3s.fetch-config
    vars:
      k3s__config_path: /home/sean/.kube/config.d/{{ inventory_hostname }}