---
- name: Initialize node lists for {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  tasks:
  - name: Set empty node lists
    ansible.builtin.set_fact:
      servers: '{{ [] }}'
      agents: '{{ [] }}'

- name: Construct server list for {{ environment_key }}
  gather_facts: no
  hosts: k3s_servers,&{{ environment_key }}
  tasks:
  - name: Add server host {{ inventory_hostname }}
    delegate_facts: yes
    delegate_to: toolbox
    ansible.builtin.set_fact:
      servers: '{{ ansible_play_hosts_all }}'

- name: Construct agent list for {{ environment_key }}
  gather_facts: no
  hosts: k3s_agents,&{{ environment_key }}
  tasks:
  - name: Add agent host {{ inventory_hostname }}
    delegate_facts: yes
    delegate_to: toolbox
    ansible.builtin.set_fact:
      agents: '{{ ansible_play_hosts_all }}'

- name: Calculate new missing agent count
  gather_facts: no
  hosts: toolbox
  tasks:
  - name: Get current cluster size
    ansible.builtin.set_fact:
      current_cluster_size: '{{ (hostvars["toolbox"]["agents"] | length) + (hostvars["toolbox"]["servers"] | length) }}'
  - name: Get difference with desired cluster size
    ansible.builtin.set_fact:
      agents_to_create: '{{ [0, cluster_size|int - ((hostvars["toolbox"]["current_cluster_size"]|int))] | max }}'
      agents_to_destroy: '{{ [0, cluster_size|int - ((hostvars["toolbox"]["current_cluster_size"]|int))] | min | abs }}'
  - debug:
      msg: 'Current cluster size: {{ hostvars["toolbox"]["current_cluster_size"] }} (a=({{ hostvars["toolbox"]["agents"] | length }}), s=({{ hostvars["toolbox"]["servers"] | length }}))'
      verbosity: 3
  - debug:
      msg: 'Desired cluster size: {{ cluster_size }}'
      verbosity: 3
  - debug:
      msg: 'Agents to create/destroy: {{ hostvars["toolbox"]["agents_to_create"] }} / {{ hostvars["toolbox"]["agents_to_destroy"] }}'
      verbosity: 3
  vars:
    cluster_size: '{{ (hostvars["toolbox"]["servers"] | length) + (hostvars["toolbox"]["agents"] | length) }}'

- name: Create k3s server for environment {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Create new cloned VM
    include_role:
      name: k3s.node
    vars:
      k3s__environment: '{{ environment_key }}'
      k3s__node_type: server
    when: (hostvars["toolbox"]["servers"] | length) == 0

- name: Create {{ hostvars["toolbox"]["agents_to_create"] }} agents for environment {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Create new cloned VM
    include_role:
      name: k3s.node
    vars:
      k3s__environment: '{{ environment_key }}'
      k3s__node_type: agent
    loop: '{{ query("sequence", "count=" + (hostvars["toolbox"]["agents_to_create"] | string)) }}'

- name: Destroy {{ hostvars["toolbox"]["agents_to_destroy"] }} agents for environment {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Destroy agent VM
    debug:
      msg: 'not implemented'
    loop: '{{ query("sequence", "count=" + (hostvars["toolbox"]["agents_to_destroy"] | string)) }}'

# todo: destroy server

# TODO: teardown tasks are very crude for now
# - name: Destroy cluster for environment {{ environment_key }}
#   gather_facts: no
#   hosts: k3s_nodes,&{{ environment_key }}
#   post_tasks:
#   - name: Update dynamic inventory
#     meta: refresh_inventory
#   tasks:
#   - name: Destroy node {{ inventory_hostname }}
#     block:
#     - name: Stop VM {{ inventory_hostname }}
#       delegate_to: toolbox
#       community.general.proxmox_kvm:
#         api_user: '{{ proxmox__api_user }}'
#         api_password: '{{ proxmox__api_password }}'
#         api_host: '{{ proxmox__api_host }}'
#         force: yes
#         name: '{{ inventory_hostname }}'
#         node: typhon
#         proxmox_default_behavior: no_defaults
#         state: stopped
#         timeout: 300
#     # VM removal fails silently if it is not shut down, so we wait for VM to settle after stopping first
#     - name: Wait for VM to shutdown
#       delegate_to: localhost
#       wait_for:
#         timeout: 15
#     - name: Remove VM {{ inventory_hostname }}
#       delegate_to: toolbox
#       community.general.proxmox_kvm:
#         api_user: '{{ proxmox__api_user }}'
#         api_password: '{{ proxmox__api_password }}'
#         api_host: '{{ proxmox__api_host }}'
#         name: '{{ inventory_hostname }}'
#         node: typhon
#         proxmox_default_behavior: no_defaults
#         state: absent
#     when: mode == 'destroy'
#   vars:
#         # set to "destroy" to run this play (and destroy a cluster)
#     mode: update