---
- name: Initialize node lists for {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  tasks:
  - name: Set empty node lists
    ansible.builtin.set_fact:
      servers: '{{ [] }}'
      server_count: 0
      agents: '{{ [] }}'
      agent_count: 0

- name: Construct server list for {{ environment_key }}
  gather_facts: no
  hosts: k3s_servers,&{{ environment_key }}
  tasks:
  - name: Add server host {{ inventory_hostname }}
    delegate_facts: yes
    delegate_to: toolbox
    ansible.builtin.set_fact:
      servers: '{{ ansible_play_hosts_all }}'
      server_count: '{{ ansible_play_hosts_all | length }}'

- name: Construct agent list for {{ environment_key }}
  gather_facts: no
  hosts: k3s_agents,&{{ environment_key }}
  tasks:
  - name: Add agent host {{ inventory_hostname }}
    delegate_facts: yes
    delegate_to: toolbox
    ansible.builtin.set_fact:
      agents: '{{ ansible_play_hosts_all }}'
      agent_count: '{{ ansible_play_hosts_all | length }}'

- name: Calculate new missing agent count
  gather_facts: no
  hosts: toolbox
  tasks:
  - name: Get current cluster size
    ansible.builtin.set_fact:
      current_cluster_size: '{{ (hostvars["toolbox"]["agents"] | length) + (hostvars["toolbox"]["servers"] | length) }}'
      desired_cluster_size: '{{ cluster_size }}'
  - name: Get difference with desired cluster size
    ansible.builtin.set_fact:
      agents_to_create: '{{ [0, cluster_size|int - ((hostvars["toolbox"]["current_cluster_size"]|int))] | max }}'
      agents_to_destroy: '{{ [0, cluster_size|int - (hostvars["toolbox"]["current_cluster_size"]|int - hostvars["toolbox"]["server_count"]|int)] | min | abs }}'
  - debug:
      msg: 'Current cluster size: {{ hostvars["toolbox"]["current_cluster_size"] }} (a=({{ hostvars["toolbox"]["agents"] | length }}), s=({{ hostvars["toolbox"]["servers"] | length }}))'
      verbosity: 3
  - debug:
      msg: 'Desired cluster size: {{ cluster_size }}'
      verbosity: 3
  - debug:
      msg: 'Agents to create/destroy: {{ hostvars["toolbox"]["agents_to_create"] }} / {{ hostvars["toolbox"]["agents_to_destroy"] }}'
      verbosity: 3
  vars:
    cluster_size: '{{ (hostvars["toolbox"]["servers"] | length) + (hostvars["toolbox"]["agents"] | length) }}'

- name: Create k3s server for environment {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Create new cloned VM
    include_role:
      name: k3s.node
    vars:
      k3s__environment: '{{ environment_key }}'
      k3s__node_type: server
    when: (hostvars["toolbox"]["servers"] | length) == 0

- name: Create {{ hostvars["toolbox"]["agents_to_create"] }} agents for environment {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Create new cloned VM
    include_role:
      name: k3s.node
    vars:
      k3s__environment: '{{ environment_key }}'
      k3s__node_type: agent
    loop: '{{ query("sequence", "count=" + (hostvars["toolbox"]["agents_to_create"] | string)) }}'

# this is crude, and should probably be extracted to a role similar to create
- name: Destroy unneeded nodes for environment {{ environment_key }}
  gather_facts: no
  hosts: toolbox
  post_tasks:
  - name: Update dynamic inventory
    meta: refresh_inventory
  tasks:
  - name: Destroy agent node
    block:
    - name: Stop VM 
      community.general.proxmox_kvm:
        api_user: '{{ proxmox__api_user }}'
        api_password: '{{ proxmox__api_password }}'
        api_host: '{{ proxmox__api_host }}'
        force: yes
        name: "{{ hostvars['toolbox']['agents'][item|int - 1] }}"
        node: typhon
        proxmox_default_behavior: no_defaults
        state: stopped
        timeout: 300
      loop: '{{ query("sequence", "count=" + (hostvars["toolbox"]["agents_to_destroy"] | string)) }}'
    # VM removal fails silently if it is not shut down, so we wait for VM to settle after stopping first
    - name: Wait for VMs to shutdown
      delegate_to: localhost
      wait_for:
        timeout: 15
    - name: Remove VM
      community.general.proxmox_kvm:
        api_user: '{{ proxmox__api_user }}'
        api_password: '{{ proxmox__api_password }}'
        api_host: '{{ proxmox__api_host }}'
        name: "{{ hostvars['toolbox']['agents'][item|int - 1] }}"
        node: typhon
        proxmox_default_behavior: no_defaults
        state: absent
      loop: '{{ query("sequence", "count=" + (hostvars["toolbox"]["agents_to_destroy"] | string)) }}'
    when: hostvars["toolbox"]["agents_to_destroy"] | int > 0
  - name: Destroy server nodes
    block:
    - name: Stop VM 
      delegate_to: toolbox
      community.general.proxmox_kvm:
        api_user: '{{ proxmox__api_user }}'
        api_password: '{{ proxmox__api_password }}'
        api_host: '{{ proxmox__api_host }}'
        force: yes
        name: "{{ hostvars['toolbox']['servers'][item|int - 1] }}"
        node: typhon
        proxmox_default_behavior: no_defaults
        state: stopped
        timeout: 300
      loop: '{{ hostvars["toolbox"]["servers"] }}'
    # VM removal fails silently if it is not shut down, so we wait for VM to settle after stopping first
    - name: Wait for VMs to shutdown
      delegate_to: localhost
      wait_for:
        timeout: 15
    - name: Remove VM
      delegate_to: toolbox
      community.general.proxmox_kvm:
        api_user: '{{ proxmox__api_user }}'
        api_password: '{{ proxmox__api_password }}'
        api_host: '{{ proxmox__api_host }}'
        name: "{{ hostvars['toolbox']['servers'][item|int - 1] }}"
        node: typhon
        proxmox_default_behavior: no_defaults
        state: absent
      loop: '{{ hostvars["toolbox"]["servers"] }}'
    when: hostvars["toolbox"]["desired_cluster_size"]|int < 1
